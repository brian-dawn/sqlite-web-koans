{"version":3,"sources":["db.ts","ResultsTable.tsx","Koan.tsx","App.tsx","index.tsx"],"names":["loadDb","a","initSqlJs","locateFile","sqlWasm","SQL","migration","db","split","forEach","line","exec","ResultsTable","props","columns","map","columnName","i","values","row","value","style","padding","Koan","useState","error","setError","results","setResults","prompt","setPrompt","answer","solved","JSON","stringify","console","log","display","flexDirection","flexWrap","alignItems","color","marginRight","meditation","onClick","sql","err","width","height","onChange","e","target","String","App","setDb","useEffect","invoke","Database","SQLRepl","populateDb","className","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.70981363.chunk.js","sourcesContent":["import initSqlJs, { Database, SqlJsStatic } from \"sql.js\";\n// Required to let webpack 4 know it needs to copy the wasm file to our assets\nimport sqlWasm from \"!!file-loader?name=sql-wasm-[contenthash].wasm!sql.js/dist/sql-wasm.wasm\";\n\nexport async function loadDb(): Promise<SqlJsStatic> {\n  const SQL = await initSqlJs({ locateFile: () => sqlWasm });\n  return SQL;\n}\n\n// From: https://github.com/phillipjohnson/sql-koans/blob/master/src/db/library.sql\nconst migration = `\ndrop table if exists book;\ndrop table if exists author;\ndrop table if exists book_to_author_map;\ndrop table if exists customer;\ndrop table if exists event;\n\ncreate table book (\n\tid int primary key asc\n\t,title varchar(100) not null\n\t,genre varchar(100)\n\t,year_published int\n\t,available boolean not null\n);\n\ncreate table author (\n\tid int primary key asc\n\t,first_name varchar(100)\n\t,last_name varchar(100)\n);\n\ncreate table book_to_author_map (\n\tbook_id int not null\n\t,author_id int not null\n);\n\ncreate table customer (\n\tid int primary key asc\n\t,name varchar(100) not null\n);\n\ncreate table event (\n\tid integer primary key asc autoincrement\n\t,type varchar(50) not null\n\t,customer_id int not null\n\t,book_id int not null\n\t,datetime text not null\n);\n\ninsert into book(id, title, genre, year_published, available) values (1, 'A Tale of Two Cities', 'Historical drama', 1859, 1);\ninsert into book(id, title, genre, year_published, available) values (2, 'Oliver Twist', 'Novel', 1837, 0);\ninsert into book(id, title, genre, year_published, available) values (3, 'Moby Dick', 'Novel', 1851, 0);\ninsert into book(id, title, genre, year_published, available) values (4, 'Never Let Me Go', 'Speculative fiction', 2005, 1);\ninsert into book(id, title, genre, year_published, available) values (5, 'The Left Hand of Darkness', 'Speculative fiction', 1969, 1);\ninsert into book(id, title, genre, year_published, available) values (6, 'The Gilded Age', 'Novel', 1873, 1);\ninsert into book(id, title, genre, year_published, available) values (7, 'The Adventures of Tom Sawyer', 'Satire', 1876, 1);\ninsert into book(id, title, genre, year_published, available) values (8, 'Beowulf', 'Epic', 1000, 1);\n\ninsert into author(id, first_name, last_name) values (1, 'Charles', 'Dickens');\ninsert into author(id, first_name, last_name) values (2, 'Herman', 'Melville');\ninsert into author(id, first_name, last_name) values (3, 'Kazuo', 'Ishiguro');\ninsert into author(id, first_name, last_name) values (4, 'Ursula', 'Le Guin');\ninsert into author(id, first_name, last_name) values (5, 'Mark', 'Twain');\ninsert into author(id, first_name, last_name) values (6, 'Charles Dudley', 'Warner');\ninsert into author(id, first_name, last_name) values (7, 'Aldous', 'Huxley');\n\ninsert into book_to_author_map(book_id, author_id) values (1, 1);\ninsert into book_to_author_map(book_id, author_id) values (2, 1);\ninsert into book_to_author_map(book_id, author_id) values (3, 2);\ninsert into book_to_author_map(book_id, author_id) values (4, 3);\ninsert into book_to_author_map(book_id, author_id) values (5, 4);\ninsert into book_to_author_map(book_id, author_id) values (6, 5);\ninsert into book_to_author_map(book_id, author_id) values (6, 6);\ninsert into book_to_author_map(book_id, author_id) values (7, 5);\n\ninsert into customer(id, name) values (20000, \"Aaron Meyers\");\ninsert into customer(id, name) values (20001, \"Paula Vasquez\");\ninsert into customer(id, name) values (20002, \"Debra Olson\");\ninsert into customer(id, name) values (20003, \"Matt Nguyen\");\n\ninsert into event(type, customer_id, book_id, datetime) values ('Checkout', 20001, 4, '2015-10-18 17:32');\ninsert into event(type, customer_id, book_id, datetime) values ('Checkin', 20001, 4, '2015-11-27 18:11');\ninsert into event(type, customer_id, book_id, datetime) values ('Checkout', 20000, 3, '2015-10-22 14:56');\ninsert into event(type, customer_id, book_id, datetime) values ('Checkin', 20000, 3, '2015-10-29 8:22');\ninsert into event(type, customer_id, book_id, datetime) values ('Checkout', 20003, 3, '2015-10-29 10:03');\ninsert into event(type, customer_id, book_id, datetime) values ('Checkin', 20003, 3, '2015-11-04 11:15');\ninsert into event(type, customer_id, book_id, datetime) values ('Checkout', 20001, 1, '2015-11-15 12:00');\ninsert into event(type, customer_id, book_id, datetime) values ('Checkin', 20001, 1, '2015-12-08 19:34');\ninsert into event(type, customer_id, book_id, datetime) values ('Checkout', 20002, 5, '2015-11-15 08:44');\ninsert into event(type, customer_id, book_id, datetime) values ('Checkout', 20002, 6, '2015-11-15 08:44');\ninsert into event(type, customer_id, book_id, datetime) values ('Checkin', 20002, 5, '2015-12-01 09:20');\ninsert into event(type, customer_id, book_id, datetime) values ('Checkin', 20002, 6, '2015-11-20 10:13');\ninsert into event(type, customer_id, book_id, datetime) values ('Checkout', 20002, 2, '2015-12-30 11:08');\ninsert into event(type, customer_id, book_id, datetime) values ('Checkout', 20000, 3, '2015-12-15 15:57');\ninsert into event(type, customer_id, book_id, datetime) values ('Checkout', 20000, 6, '2015-12-15 15:57');\ninsert into event(type, customer_id, book_id, datetime) values ('Checkout', 20001, 1, '2015-12-15 13:05');\ninsert into event(type, customer_id, book_id, datetime) values ('Checkin', 20001, 1, '2015-12-30 14:59');\ninsert into event(type, customer_id, book_id, datetime) values ('Lost', 20000, 3, '2015-12-30 16:46');\n`;\n\nexport async function populateDb(db: Database) {\n  migration.split(/;/).forEach((line) => {\n    db.exec(line);\n  });\n}\n","import { QueryExecResult, SqlValue } from \"sql.js\";\n\ninterface ResultsTableProps {\n  columns: string[];\n  values: SqlValue[][];\n}\n/**\n * Renders a single value of the array returned by db.exec(...) as a table\n */\nexport function ResultsTable(props: ResultsTableProps) {\n  return (\n    <table>\n      <thead>\n        <tr>\n          {props.columns.map((columnName, i) => (\n            <td key={i}>{columnName}</td>\n          ))}\n        </tr>\n      </thead>\n\n      <tbody>\n        {\n          // values is an array of arrays representing the results of the query\n          props.values.map((row, i) => (\n            <tr key={i}>\n              {row.map((value, i) => (\n                <td\n                  style={{\n                    padding: \".25em\",\n                  }}\n                  key={i}\n                >\n                  {value}\n                </td>\n              ))}\n            </tr>\n          ))\n        }\n      </tbody>\n    </table>\n  );\n}\n","import { useState } from \"react\";\nimport { Database, QueryExecResult } from \"sql.js\";\nimport { ResultsTable } from \"./ResultsTable\";\n\ninterface KoanProps {\n  db: Database;\n\n  meditation: string;\n\n  // The koan prompt, consecutive underscores are what the user changes.\n  prompt: string;\n\n  // The correct query to compare against once executed.\n  answer: string;\n}\n\nexport const Koan = (props: KoanProps) => {\n  const [error, setError] = useState<unknown | null>(null);\n  const [results, setResults] = useState<QueryExecResult[]>([]);\n  const [prompt, setPrompt] = useState(props.prompt);\n\n  const answer = props.db.exec(props.answer);\n\n  const solved = JSON.stringify(answer) === JSON.stringify(results);\n  console.log(\"answer\", answer, results, solved);\n\n  const exec = (sql: string) => {\n    try {\n      setResults(props.db.exec(sql));\n      setError(null);\n    } catch (err) {\n      setError(err);\n      setResults([]);\n    }\n  };\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        flexWrap: \"wrap\",\n        alignItems: \"center\",\n        padding: \".5em\",\n      }}\n    >\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"row\",\n          alignItems: \"center\",\n          flexWrap: \"wrap\",\n        }}\n      >\n        <h3\n          style={{\n            color: solved ? \"green\" : \"red\",\n            marginRight: \".5em\",\n          }}\n        >\n          {props.meditation}\n        </h3>\n\n        <button\n          style={{\n            marginRight: \"1em\",\n          }}\n          onClick={() => {\n            exec(prompt);\n          }}\n        >\n          Run\n        </button>\n      </div>\n\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n        }}\n      >\n        <textarea\n          style={{\n            padding: \".5em\",\n            width: \"20em\",\n            height: \"1em\",\n          }}\n          onChange={(e) => setPrompt(e.target.value)}\n          value={prompt}\n        />\n\n        {\n          // results contains one object per select statement in the query\n          results.map(({ columns, values }, i) => (\n            <ResultsTable key={i} columns={columns} values={values} />\n          ))\n        }\n\n        {error !== null && <pre>{String(error)}</pre>}\n      </div>\n    </div>\n  );\n};\n","import { useState, useEffect } from \"react\";\nimport \"./styles.css\";\nimport { Database, QueryExecResult } from \"sql.js\";\nimport { loadDb, populateDb } from \"./db\";\nimport { Koan } from \"./Koan\";\nimport { ResultsTable } from \"./ResultsTable\";\n\nexport default function App() {\n  const [db, setDb] = useState<null | Database>(null);\n  const [error, setError] = useState<unknown>(null);\n\n  useEffect(() => {\n    const invoke = async () => {\n      // sql.js needs to fetch its wasm file, so we cannot immediately instantiate the database\n      // without any configuration, initSqlJs will fetch the wasm files directly from the same path as the js\n      // see ../craco.config.js\n      try {\n        const SQL = await loadDb();\n        setDb(new SQL.Database());\n      } catch (err) {\n        setError(err);\n      }\n    };\n    invoke();\n  }, []);\n\n  if (error) return <pre>{String(error)}</pre>;\n  else if (!db) return <pre>Loading...</pre>;\n  else return <SQLRepl db={db} />;\n}\n\nfunction SQLRepl({ db }: { db: Database }) {\n  const [error, setError] = useState<unknown>(null);\n  const [results, setResults] = useState<QueryExecResult[]>([]);\n\n  populateDb(db);\n\n  function exec(sql: string) {\n    try {\n      // The sql is executed synchronously on the UI thread.\n      // You may want to use a web worker here instead\n      setResults(db.exec(sql)); // an array of objects is returned\n      setError(null);\n    } catch (err) {\n      // exec throws an error when the SQL statement is invalid\n      setError(err);\n      setResults([]);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <Koan\n        db={db}\n        meditation={\"Meditate on upper-case queries\"}\n        prompt={\"SELECT 1\"}\n        answer={\"SELECT 1\"}\n      />\n\n      <Koan\n        db={db}\n        meditation={\"Meditate on lower-case queries\"}\n        prompt={\"_ 1\"}\n        answer={\"SELECT 1\"}\n      />\n\n      <Koan\n        db={db}\n        meditation={\"Meditate on selecting all columns from a table\"}\n        prompt={\"select * from book\"}\n        answer={\"select * from book\"}\n      />\n\n      <Koan\n        db={db}\n        meditation={\"Meditate on selecting one column (title) from a table\"}\n        prompt={\"select _ from book\"}\n        answer={\"select title from book\"}\n      />\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}